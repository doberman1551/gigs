import Head from 'next/head'
import Image from 'next/image'
import BottomJobCard from '../../components/BottomJobCard'
import FeaturedJobs from '../../components/FeaturedJobs'
import Hero from '../../components/Hero'
import JobCard from '../../components/JobCard'
import Navbar from '../../components/Navbar'
import SearchBar from '../../components/SearchBar'
import SideJobCard from '../../components/SideJobCard'
import { API_URL } from '../../config'
import Select from 'react-select'
import { useQuery, useQueryClient } from 'react-query'
import { useState } from 'react'
//import styles from '../styles/Home.module.css'
const getJobs=async(key)=>{
    console.log(key)
    const categoryValue=key.queryKey[1].category[0].value
    console.log(categoryValue)

if(categoryValue){
    const res=await fetch(`${API_URL}/jobs?filters[$and][0][category][name][$contains]=${categoryValue}`)
   console.log(res)
    return res.json()
   
}


    const res = await fetch(`${API_URL}/jobs?populate=*&sort=featured:desc&sort=publishedAt:desc`)
    return res.json()
}


export default function filter({jobs,categories}) {

  console.log(jobs)
  const queryClient=useQueryClient()
  const [categoryValue, setCategoryValue]=useState(null)
  const {data,status}=useQuery(['jobs',{category:categoryValue}],getJobs)
  
  const options= [
    { value: 'Developer', label: 'Developer' },
    { value: 'Community', label: 'Community' },
    { value: 'vanilla', label: 'Vanilla' }
  ]
  const handleCategories=(values)=>{
      console.log(values)
  }
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar></Navbar>
      <section className="bg-background">
    
      <Hero/>
      <div className="container mx-auto w-full md:max-w-7xl">
      <SearchBar/>
      
      <div className="text-black"><Select
               
                options={options} 
                instanceID="categories"
                isMulti
                placeholder="Filter by Category"
                onChange={values=>setCategoryValue(values)}
                />
      
      </div>
      </div>
      <div className="container mx-auto max-w-7xl">
      <h2 className="text-xl sm:text-xl md:text-2xl lg:text-2xl xl:text-2xl  text-white">Featured Gigs</h2>
      <div className="container mx-auto md:flex  items-stretch justify-between">
      <div>
          {status==='loading' &&<div> I am loading</div>}
          {status==='error'&& <div>Something went wrong</div>}
          {status==='success'&& data.data.map((job) => (
      
        <FeaturedJobs key={job.id} job={job} />
    ))}
      </div> 
      <SideJobCard/>
      
      

      </div>
      
     
      </div>
      <div className="container mx-auto max-w-7xl">
      <div className="flex items-stretch justify-center">
      <BottomJobCard/>
      </div>
      </div>
      </section>

      <footer>
       
      </footer>
    </div>
  )
}
export async function getServerSideProps() {

  const jobRes = await fetch(`${API_URL}/jobs?populate=*&sort=featured:desc&sort=publishedAt:desc`)
  const jobs=await jobRes.json()
  const categoriesRes=await fetch(`${API_URL}/categories?populate=*`)
  const categoriesData=await categoriesRes.json()
return{
  props:{jobs:jobs,
    categories:categoriesData
}
}
}

